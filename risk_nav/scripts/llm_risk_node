#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String, Float32MultiArray

class LLMRiskNode(Node):
    def __init__(self):
        super().__init__('llm_risk_node')
        self.gating = self.declare_parameter('gating', True).get_parameter_value().bool_value
        self.unknown_only = self.declare_parameter('unknown_only', True).get_parameter_value().bool_value
        self.keywords = self.declare_parameter('danger_keywords', ['door','corner','blind']).get_parameter_value().string_array_value
        self.sub_caption = self.create_subscription(String, '/scene_caption', self.on_caption, 10)
        self.pub_risk = self.create_publisher(Float32MultiArray, '/risk_semantic', 10)
        self.cache = {}
        self.get_logger().info('LLM risk node (mock) started.')

    def on_caption(self, msg: String):
        text = msg.data.lower()
        risk = 0.0
        if any(k in text for k in self.keywords):
            risk = 0.7
        self.cache[text] = risk
        self.pub_risk.publish(Float32MultiArray(data=[risk]))

def main():
    rclpy.init()
    node = LLMRiskNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main() 