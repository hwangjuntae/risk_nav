#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from nav_msgs.msg import OccupancyGrid

class CmdVelRiskFilter(Node):
    def __init__(self):
        super().__init__('cmd_vel_risk_filter')
        self.k = self.declare_parameter('risk_gain', 0.8).value
        self.last_risk = 0.0
        self.sub_grid = self.create_subscription(OccupancyGrid, '/risk_grid', self.on_grid, 10)
        self.sub_cmd  = self.create_subscription(Twist, '/cmd_vel', self.on_cmd, 10)
        self.pub = self.create_publisher(Twist, '/cmd_vel_risk', 10)

    def on_grid(self, msg: OccupancyGrid):
        vals = [v for v in msg.data if v >= 0]
        self.last_risk = (max(vals)/100.0) if vals else 0.0

    def on_cmd(self, msg: Twist):
        out = Twist()
        scale = max(0.1, 1.0 - self.k*self.last_risk)
        out.linear.x  = msg.linear.x  * scale
        out.linear.y  = msg.linear.y
        out.linear.z  = msg.linear.z
        out.angular.x = msg.angular.x
        out.angular.y = msg.angular.y
        out.angular.z = msg.angular.z * scale
        self.pub.publish(out)

def main():
    rclpy.init()
    node = CmdVelRiskFilter()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main() 