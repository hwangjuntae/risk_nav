#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray
from nav_msgs.msg import OccupancyGrid, MapMetaData

class RiskLayerNode(Node):
    def __init__(self):
        super().__init__('risk_layer_node')
        self.res = self.declare_parameter('resolution', 0.1).value
        self.w   = self.declare_parameter('width', 200).value
        self.h   = self.declare_parameter('height', 200).value
        self.ox  = self.declare_parameter('origin_x', -10.0).value
        self.oy  = self.declare_parameter('origin_y', -10.0).value
        self.last_sem = 0.0
        self.sub_sem = self.create_subscription(Float32MultiArray, '/risk_semantic', self.on_sem, 10)
        self.pub_grid = self.create_publisher(OccupancyGrid, '/risk_grid', 10)
        self.timer = self.create_timer(0.1, self.publish_grid)  # 10Hz

    def on_sem(self, msg: Float32MultiArray):
        if msg.data:
            self.last_sem = max(0.0, min(1.0, msg.data[0]))

    def publish_grid(self):
        grid = OccupancyGrid()
        grid.header.frame_id = 'map'
        grid.header.stamp = self.get_clock().now().to_msg()
        info = MapMetaData()
        info.resolution = float(self.res)
        info.width = int(self.w); info.height = int(self.h)
        info.origin.position.x = float(self.ox); info.origin.position.y = float(self.oy)
        grid.info = info
        val = int(self.last_sem * 100)
        grid.data = [val] * (self.w * self.h)  # MVP: 전역 동일
        self.pub_grid.publish(grid)

def main():
    rclpy.init()
    node = RiskLayerNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main() 